#!/bin/bash

# This file is loaded for all user accounts and editing it
# is potentially dangerous. Any edits should be thoroughly
# thought out and tested.

# building aliases
alias sendsms="/kwh/transceive/sms/smsSend.sh"
alias readsms="/kwh/transceive/sms/smsRead.sh"
alias setconf="/kwh/config/set_config.py"
alias delconf="/kwh/config/delete_config.py"
alias reload=". /kwh/config/kwh.conf"
alias aconf="config | grep 'AD[0-9][0-9]'"
alias pconf="config | grep 'PU[0-9][0-9]'"
alias mconf="config | grep 'M*'"
alias dtm="cat /kwh/datetime/datetime | head -c 19"
alias dtm+="cat /kwh/datetime/datetime"
alias data="/kwh/etc/MySQL/show_data.sh"

alias seattle="
setconf PORT 11001;
setconf STA SeattlePi;
setconf ADMPW 1111;"

alias denver="setconf PORT 11002;
setconf STA DenverPi;"

# building functions
function config(){
    echo 'SELECT `key`, value FROM kwh.config WHERE active = 1' | mysql -u pi
}

alias help="echo -e '\
================================================================================\n\
=             Welcome to the kwh RPi Data Logger software package              =\n\
================================================================================\n\
\n\
These aliases and functions are available to simplify the use of this software\n\
\n\
This is a long \"echo\" statement that is piped into \"more\" to stop printing once\n\
the screen is full. Press enter to navigate down through the list or \"q\" to exit\n\
\n\
aconf (no arguments): \n \
  This will display the config values of all the analog input channels\n \
  i.e. whether they are enabled or disabled, 1 or 0\n \
\n\
aval (no arguments): \n \
  This displays the analog values that are currently on disk. These values\n \
  are only updated when /kwh/adc/capture.py is run\n \
  This is also currently displaying the temp sensor values, but they will\n \
  soon be moved to their own config and value aliases, tconf and tval\n \
\n\
config (no arguments): \n \
  This displays all of the current config variables and their values\n \
\n\
defaults (no arguments): \n \
  This displays the default config that is used by the smsProcess code to\n \
  RESET the data logger to its default values\n \
\n\
denver (no arguments): \n \
  This sets the default config to the config for the Denver RPi Data Logger\n \
\n\
gitpush (no arguments): \n \
  This is used to push new code up to the RPiDasEditor repo. To be able to\n \
  submit a pull request, you must \"merge\" with the main repo, and you need to\n \
  \"gitpush\" your new code to the RPiDASEditor repo.\n \
\n\
help (no arguments): \n \
  Displays this help information\n \
\n\
helpconf (no arguments): \n \
  Displays a list of definitions for each config variable\n\
\n\
merge (no arguments): \n \
  This will download the new code from the main repo, and is required to be\n \
  able to initiate a pull request with pullreq\n\
\n\
pconf (no arguments): \n \
  This will display the config values of all the pulse input channels\n \
  i.e. whether they are enabled or disabled, 1 or 0\n \
\n\
pullreq (no arguments): \n \
  This will initiate a pull request to the main repo. NOTE: You must have\n \
  synced up your code with the main repo by using \"merge\" and have pushed\n \
  the new code to the RPiDASEditor repo with \"gitpush\", so that the main repo\n \
  has a place to pull it from\n\
\n\
pval (no arguments): \n \
  This displays the pulse values that are currently on disk. These values\n \
  are updated dynamically by the individual pulse readers that run at boot.\n \
\n\
readsms (no arguments): \n \
  This will read the sms memory from the SIM card and populate the log file\n \
  at /kwh/transceive/sms/read.log\n \
\n\
reload (no arguments): \n \
  This will reload all environment variables, aliases, and functions by\n \
  sourcing the file /kwh/config.conf\n \
\n\
seattle (no arguments): \n \
  This sets the default config to the config for the Seattle RPi Data Logger\n \
\n\
sendsms <phone #> <A message>: \n \
  The message can have spaces. This will send an sms.\n \
  e.g. sendsms 4252681938 Hi Dave!\n \
\n\
setconf <config variable name> <config value>: \n \
  This is used to create new config variables or update existing config\n \
  variables. \n \
  e.g. setconf PORT 11002\n \
\n\
version (no arguments): \n \
  This displays the current version number, which is updated every time we\n \
  push new code to GitHub\n' | more"

alias helpconf="echo -e '\
================================================================================\n\
=             Welcome to the kwh RPi Data Logger software package              =\n\
================================================================================\n\
\n\
This defines the config variables that are used by the RPi Data Logger\n\
\n\
This is a long \"echo\" statement that is piped into \"more\" to stop printing once\n\
the screen is full. Press enter to navigate down through the list or \"q\" to exit\n\
\n\
All config variables are used as global environment variables, and should all
use names that are entirely capitalized.
\n\
ADxx: Where xx represents the two digit analog channel number. This controls\n\
whether the analog channel is enabled or not. The only permissible values are\n\
0 and 1, where 0 is disabled and 1 is enabled.\n\
\n\
PUxx: Where xx represents the two digit pulse channel number. This controls\n\
whether the pulse channel is enabled or not. The only permissible values are\n\
0 and 1, where 0 is disabled and 1 is enabled.\n\
\n\
DOMAIN: This is the domain of the server that the RPi Data Logger will send\n\
its data to.
\n\
PORT: When the RPi sends data to the server domain, it sends it to this port.\n\
\n\
SIM_PORT: When the simServer service starts up, it aquires an available port\n\
starting with 9999 and working up until it finds one that is available. Once\n\
an available port is selected, it is logged into this global variable so all\n\
other code knows where to talk to the simServer.\n\
\n\
APN: This is the cellular internet provider Access Point Name, and is used\n\
to request internet access via AT commands. If the APN is unknown, try\n\
\"internet\".\n\
\n\
ADMPW: This is the administrator password. When reprogramming the RPi Data\n\
Logger via SMS commands, the command will only be accepted if the correct\n\
password is provided.\n\
\n\
INQPW: This is the inquiry password. When querying the RPi Data Logger for\n\
information, responses will only be sent if the correct inquiry password is\n\
provided.\n\
\n\
DEBUG: This controls logging in several of the programs. The only permissible\n\
values are 0 or 1, where 0 is disabled and 1 is enabled. Be careful not to\n\
leave this enabled, as log files will continuously grow and waste the sd\n\
card memory.\n\
\n\
STA: This is the Station ID, i.e. the name of the RPi Data Logger as it is\n\
reported to the server. This ID causes the server to create a new folder in\n\
the database for this RPi Data Logger. If you use an STA that is already\n\
in use, your data will collide with theirs and potentially overwrite it.\n\
\n\
TEMPx*: Where x* represents any normal number, e.g. 1423 or just 3. This\n\
config variable links the less usable temp sensor IDs to an easier to\n\
reference name. e.g. TEMP22 might equal 28-0000087de4ba.\n\
\n\
TEMP_COUNT: This is used for keeping track of the most recently assigned\n\
temp sensor config. E.g. if TEMP1, TEMP2, and TEMP3 are the only ones\n\
that currently exist, TEMP_COUNT will be 3. TEMP_COUNT is used to\n\
dynamically link TEMPx* to any new temp sensors that are connected to the\n\
RPi Data Logger.\n\
\n\
TX_INTRVL: This is not yet implemented, but is intented to be used for the\n\
transmit time interval, so that users can implement transmit intervals\n\
other than 1 minute, which is currently hardcoded.\n\
' | more
"
# this is for cron
shopt -s expand_aliases 

# adding  to PATH envvar
export PATH=$PATH:/kwh
